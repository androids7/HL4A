package hl4a.ide.界面;

import android.content.Intent;
import android.os.Bundle;
import hl4a.ide.工具.工程;
import hl4a.ide.布局.布局_工程管理;
import hl4a.ide.布局.布局_新建签名;
import hl4a.ide.布局.布局_设置弹窗;
import hl4a.ide.布局.布局_配置签名;
import 间.安卓.工具.处理;
import 间.安卓.工具.提示;
import 间.安卓.工具.文件;
import 间.安卓.工具.线程;
import 间.安卓.工具.链接;
import 间.安卓.弹窗.基本弹窗;
import 间.安卓.弹窗.进度弹窗;
import 间.安卓.组件.界面;
import 间.安卓.视图.文本视图;
import 间.安卓.视图.线性布局;
import 间.安卓.资源.图标;
import 间.工具.ZIP;
import 间.工具.反射;
import 间.接口.方法;
import 间.接口.调用;
import 间.收集.哈希表;
import 间.安卓.工具.转换;

public class 工程界面 extends 界面 {

    private 哈希表 所有 = new 哈希表();

    private 布局_工程管理 布局;
    private String 地址;
    private 工程 当前;

    private 基本弹窗 设置;
    private 基本弹窗 删除;
    private 布局_设置弹窗 内容;

    @Override
    public void 界面回调事件(int $请求码,int $返回码,Intent $意图) {
        switch ($返回码) {
            case 233:
                结束界面();return;
        }
    }

    public boolean 检查() {
        if (!文件.是文件(当前.取地址(工程.配置文件))) {
            提示.警告("工程已损坏!");
            结束界面();
            return true;
        }
        return false;
    }

    @Override
    public void 界面刷新事件() {
        检查();
    }

    @Override
    public void 界面创建事件(Bundle $数据) {
        地址 = (String)传入参数[0];
        置滑动返回(true);
        if (!工程.检查(地址)) {
            提示.警告("工程已损坏!");
            结束界面();
        }
        当前 = 工程.读取(地址);
        布局 = new 布局_工程管理(此);
        布局.标题.左按钮(图标.返回, 调用.配置(this, "结束界面"));
        打开布局(布局);
        创建设置("工程名", "包名", "版本名", "版本号");
        内容 = new 布局_设置弹窗(此);
        设置 = new 基本弹窗(此);
        设置.置内容(内容);
        设置.置中按钮("取消", 设置.隐藏);
        删除 = new 基本弹窗(此);
        删除.置标题("删除工程");
        删除.置内容("真的要删除 " + 当前.信息.工程名 + " 吗？");
        删除.置中按钮("取消", 删除.隐藏);
        删除.置右按钮("删除", 调用.配置(this, "直接删除"));
        创建按钮("进入编辑").置单击事件(调用.配置(this, "进入编辑"));
        创建按钮("打包HPK").置单击事件(调用.配置(this, "打包HPK"));
        创建按钮("删除工程").置单击事件(调用.配置(删除, "显示"));
    }

    public void 打包HPK() {
        if (检查()) return;
        String $输出 = 文件.取目录(当前.取地址()) + "/" + 当前.信息.工程名 + ".hpk";
        ZIP.压缩(当前.取地址(), $输出);
        提示.普通("打包成功 ~ \n" + $输出);
        return;
    }
    
    /*

    public void 打包APK() {
        if (检查()) return;
        协议.隐藏();
        if (!工程.检查包名(当前.信息.包名)) {
            内容.类型 = "包名";
            设置.置标题("包名不符合规范");
            内容.编辑.置默认文本("新的包名");
            设置.置右按钮("打包", 调用.配置(this, "更改打包"));
            设置.显示();
            return;
        }

        try {
            秘钥签名 $签名 = new 秘钥签名("#assets/hl4a.jks", "hl4atset", "hl4atset", "hl4atset");
            new 编译工程(此, 当前, $签名).启动();
        } catch (Exception e) {
            提示.警告(e.getMessage());
        }

    }

    
    */

    public void 直接删除() {

        if (检查())return;
        文件.删除(当前.取地址());
        提示.普通("删除成功 ！");
        删除.隐藏();
        结束界面();
        return;
    }


    public void 进入编辑() {
        if (检查())return ;
        跳转界面(666, 编辑界面.class, 当前.地址);
        return ;
    }

    public Integer 更改设置() {
        if (检查())return null;
        String $内容 = 内容.编辑.取文本();
        String $类型 = 内容.类型;
        if ($类型.equals("版本号")) {
            if ("".equals($内容)) {
                提示.警告("请不要留空 ~");
                return null;
            }
            ((文本视图)所有.读取($类型)).置文本($内容);
            反射.置变量(当前.信息, $类型, 转换.数字($内容));
            当前.保存();
            设置.隐藏();
            return 233;
        }
        String $原内容 = (String)反射.取变量(当前.信息, $类型);
        if ("".equals($内容)) {
            提示.警告("请不要留空 ~");
            return null;
        } else if ($类型 == "包名") {
            if (!工程.检查包名($内容)) {
                return null;
            } else if (工程.检查($内容)) {
                提示.警告("该包名已存在 ~");
                return null;
            }
            if (!工程.移动($原内容, $内容)) {
                提示.警告("移动失败 未知错误!");
                return null;
            }
            地址 = $内容;
            当前.地址 = $内容;
        } else {
            提示.普通("更改成功 ~");
        }
        ((文本视图)所有.读取($类型)).置文本($内容);
        反射.置变量(当前.信息, $类型, $内容);
        当前.保存();
        设置.隐藏();
        return 233;
    }

    public void 启动设置(线性布局 $按钮,Object[] $参数) {

        if (检查())return;
        文本视图 $文本 = (文本视图)$按钮.取子元素("文本");
        文本视图 $内容 = (文本视图)$按钮.取子元素("内容");
        内容.类型 = $文本.取文本();
        if (内容.类型.equals("版本号")) {
            内容.编辑.置输入类型("数字");
        }
        内容.编辑.置文本($内容.取文本());
        内容.编辑.置默认文本("请输入新" + 内容.类型);
        设置.置标题("更改" + $文本.取文本());
        设置.置右按钮("更改", 调用.配置(this, "更改设置"));
        设置.显示();
        return;

    }

    public void 创建设置(String... $所有) {
        for (String $设置 :$所有) {
            线性布局 $按钮 = new 线性布局(布局.底层);
            $按钮.置高度("自动");
            $按钮.置背景("透明");
            $按钮.置方向("水平");
            $按钮.置重力("中间垂直");
            $按钮.置单击事件(调用.代理(this, "启动设置"));
            $按钮.置填充("16dp", "16dp", "16dp", "16dp");
            文本视图 $文本 = new 文本视图($按钮);
            $文本.置文本($设置);
            $文本.置标签("文本");
            线性布局 $布局 = new 线性布局($按钮);
            $布局.置方向("水平");
            $布局.置重力("右边");
            $布局.置高度("自动");
            文本视图 $内容 = new 文本视图($布局);
            $内容.置标签("内容");
            $内容.置文本(反射.取变量(当前.信息, $设置).toString());
            所有.设置($设置, $内容);
        }
    }

    public 线性布局 创建按钮(String $名称) {
        线性布局 $按钮 = new 线性布局(布局.底层);
        $按钮.置高度("自动");
        $按钮.置背景("透明");
        $按钮.置方向("水平");
        $按钮.置重力("中间垂直");
        $按钮.置填充("16dp", "16dp", "16dp", 0);
        文本视图 $文本 = new 文本视图($按钮);
        $文本.置文本($名称);
        $文本.置标签("文本");
        return $按钮;
    }



}
